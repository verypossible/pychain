service: pychain

frameworkVersion: ">=1.20.0"

provider:
  name: aws
  runtime: python3.6
  memorySize: 128
  region: ${env:AWS_REGION}
  timeout: 15
  vpc:
    securityGroupIds:
      - Fn::GetAtt: ServerlessSecurityGroup.GroupId
    subnetIds:
      - ${env:SUBNET_ID_A}
      - ${env:SUBNET_ID_B}
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "ec2:CreateNetworkInterface"
        - "ec2:DescribeNetworkInterfaces"
        - "ec2:DeleteNetworkInterface"
      Resource: "*"
    - Effect: "Allow"
      Action:
        - "sns:*"
      Resource: "arn:aws:sns:${self:provider.region}:*:${env:ENV}PyChainMiners"
  environment:
    # PYCHAIN_DIFFICULTY_BITS: "18"
    # PYCHAIN_MAX_MINING_TIME: "15"
    PYCHAIN_REDIS_HOST:
      Fn::GetAtt:
        - ElasticacheNode
        - RedisEndpoint.Address

package:
  exclude:
    - "**/*.pyc"
    - "**/*.swp"
    - "**/__pycache__"
    - ".git/**"

# - Fn::GetAtt:
#     - ElasticacheSecurityGroup
#     - GroupId

resources:
  Resources:
    NAT:
      Type: AWS::EC2::NatGateway
      Properties:
        AllocationId:
          Fn::GetAtt:
          - EIP
          - AllocationId
        # this is the public subnet A
        SubnetId: subnet-0ba2af43
        Tags:
          - Key: Name
            Value: pychain
    EIP:
      Type: AWS::EC2::EIP
      Properties:
        Domain: vpc
    Route:
      Type: AWS::EC2::Route
      Properties:
        RouteTableId: rtb-35782d4f
        DestinationCidrBlock: 0.0.0.0/0
        NatGatewayId:
          Ref: NAT
    SNSMiningTopic:
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: ${env:ENV}PyChainMiners
        TopicName: ${env:ENV}PyChainMiners
    ElasticacheNode:
      Type: AWS::ElastiCache::CacheCluster
      Properties:
        CacheNodeType: cache.t2.micro
        ClusterName: ${env:ENV}RedisBlockchain
        Engine: redis
        EngineVersion: 3.2.6
        NumCacheNodes: 1
        VpcSecurityGroupIds:
          - Fn::GetAtt: ElasticacheSecurityGroup.GroupId
    ServerlessSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: SecurityGroup for Serverless Functions
        VpcId: ${env:VPC_ID}
    ElasticacheSecurityGroup:
      Type: AWS::EC2::SecurityGroup
      Properties:
        GroupDescription: Elasticache Security Group
        VpcId: ${env:VPC_ID}
        SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "6379"
          ToPort: "6379"
          SourceSecurityGroupId:
            Fn::GetAtt: ServerlessSecurityGroup.GroupId

functions:
  Index:
    handler: handler.index
    events:
      - http: GET /
      - http:
          path: /{db_number}
          method: get
          request:
            parameters:
              paths:
                db_number: true
  AddTransaction:
    handler: handler.add_transaction
    events:
      - http: POST /
      - http:
          path: /{db_number}
          method: post
          request:
            parameters:
              paths:
                db_number: true
      - http:
          path: /broadcast/{db_number}
          method: post
          request:
            parameters:
              paths:
                db_number: true
  AddNewBlock:
    handler: handler.add_new_block
    events:
      - http:
          path: /block/{db_number}
          method: post
          request:
            parameters:
              paths:
                db_number: true
  Mine:
    handler: handler.sns_mine
    timeout: 60
    events:
      - sns:
          topicName: ${env:ENV}PyChainMiners
          arn:
            Ref: SNSMiningTopic
  VerifyNewBlock:
    handler: handler.verify_new_block
    events:
      - http:
          path: /verifyblock/{db_number}
          method: post
          request:
            parameters:
              paths:
                db_number: true
  WebMine:
    handler: handler.web_mine
    events:
      - http: POST /_mine
